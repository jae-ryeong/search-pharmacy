plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

bootJar {
    archiveFileName = "app.jar"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testImplementation 'org.testcontainers:testcontainers:1.18.3' // TC 의존성
    testImplementation 'org.testcontainers:junit-jupiter:1.18.3'  // TC 의존성
    testImplementation "org.testcontainers:mariadb:1.19.3"
    testImplementation 'org.testcontainers:jdbc:1.18.3'

    implementation 'org.springframework.retry:spring-retry'

    // mockWebServer
    testImplementation('com.squareup.okhttp3:okhttp:4.10.0')
    testImplementation('com.squareup.okhttp3:mockwebserver:4.10.0')

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // https://github.com/seruco/base62
    implementation 'io.seruco.encoding:base62:0.1.3'

    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
}

tasks.named('test') {
    useJUnitPlatform()
}

// $ ./gradlew clean build -PKAKAO_REST_API_KEY={api key 값} 명령어로 전체 테스트 및 빌드하여 jar 파일 생성
processTestResources {
    // API key 값을 정상적으로 받았는지
    boolean hasProperty = project.hasProperty("KAKAO_REST_API_KEY")
    System.out.println("Set kakao rest api key: $hasProperty")
    filesMatching('**/application.yml') {
        expand(project.properties)
    }
}
